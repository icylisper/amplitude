Amplifying Clojurescript on AWS

* Getting Started

Add following to deps.edn or your cljs deps file
#+begin_src clojure
{:deps {omnyway-labs/amplitude
        {:git/url "https://github.com/omnyway-labs/amplitude.git"
         :sha "7d39971d89780c20c64ce34277b3a8c276704b16"}}}
#+end_src

Install amplify-cli. See here to get started
https://docs.amplify.aws/cli/start/install

This library expects some familiarity with getting started with AWS
Amplify. It also expects to have a local src/aws-exports.js to load
and invoke the APIs.
The aws-exports.js file contains the resource identifiers, urls and
keys needed to invoke Graphql queries, storage requests etc.


* API

** Config

=amplitude.config= provides handy functions to initialize the
aws-exports.js config file

#+BEGIN_SRC clojure
(:require
  [amplitude.config :as config]
  ["/aws-exports.js" :default awsmobile])
(config/init! awsmobile)

;; and elsewhere
(config/lookup)
;; => returns the aws-exports.js config as edn

#+END_SRC

** AppSync GraphQL APIs

Provides abstractions to query, mutate and search Appsync backends
via graphql. The backends can be anything - HTTP server, DynamoDB,
RDS, Lambda etc.
The graphql queries are generated dynamically during invocation time.
The generated code from Amplify is not used for performance reasons.

#+BEGIN_SRC clojure
(require [amplitude.api.graphql :as gql])
(gql/init!)
#+END_SRC

=amplitude.graphql= provides a set of useful functions to query AppSync
Graphql Entities.

To show the usage of these functions, let us take the classic =Cart= example

#+BEGIN_SRC graphql
type Cart @model{
  id: ID!
  line_items: [LineItem]
  payment: Payment @connection
  tax: Int
  total: Int
}

type Payment @model{
  id: ID!
  card: Card @connection
  amount: Int
  status: PaymentStatus!
}

type Card @model{
  id: ID!
  name: String
}

type subscription {
  subscribeCart(id:String): Cart
  @aws_subscribe(mutations: ["updateCart"])
}

#+END_SRC

To create a =cart= record, we just do:

#+BEGIN_SRC clojure
(gql/create! :cart
             {:input {:line-items items
                      :total      total}
              :shape [:id]
              :on-create (fn [{:keys [id]}]
                          (gql/subscribe! :cart
                                          (fn [updated-cart]
                                            (rf/dispatch ::events/cart updated-cart))))})
#+END_SRC

Notice that in the =on-create= callback function, we subscribe to the
cart changes.
The subscription function passed as arg to =gql/subscribe!=
gets called whenever the cart is updated. The on-subscribe function,
for example, could use reframe's dispatch and mutate the appdb.

Let us say we had a =pay= button that needs to trigger some
business logic - perhaps in a secure cloud or VPC. Appsync resolves
this mutation to any defined Resolver (HTTP API, Lambda or databases).
The following defines the =pay= mutation to be resolved via a Lambda
called "payment-processor"

#+begin_src graphql
type mutation {
  pay(
    cart_id: String!
    card_id: String!
    amount: Int
  ): String @function(name: "payment-processor")
#+end_src

In the above schema, the =pay= mutation has a =@function= directive which
defines the backend resolver for this mutation.
We assume here that "payment-processor" AWS Lambda is provisioned
either via amplify-cli or some other mechansim.
The function name can be annotated with a "-{env}" template variable too.

#+BEGIN_SRC clojure
(gql/resolve! :pay
              {:input-schema {:cart-id :String
                              :card-id :String}
               :input        {:cart-id "xxx"
                              :card-id "card-123"}
               :on-resolve   (fn [record] (rf/dispatch :cart %))})
#+END_SRC

=resolve!= invokes the graphql resolver via Appsync and executes the
payment-processor Lambda. The Mutator could create a payment record
and associate the payment-id with the cart. Assuming we are running
cljs+amplitude in the lambda, we could do the following in the Lambda
function

#+begin_src clojure

(gql/create! :payment
             {:input     {:cart-id "xxx"
                          :card-id* "card123"}
              :on-create (fn [{:keys [id]}]
                           (gql/update! :cart
                                        {:input     {:id          cart-id
                                                     :payment-id* id}
                                         :on-update log/info}))})
#+end_src

In the above code, the backend lambda process creates a payment
record and in the =on-create= callback-fn it updates the cart with the
payment-id.
=payment-id*= is syntactic sugar to hint that it is a connection to a
payment type/record. Notice in the Cart type, we do not have an
explicit payment-id field.

All along, we had the frontend cljs app subscribe to updates on
the cart. When the payment-processor lambda mutates the cart, the
subscription handler fn gets invoked.

=amplitude= also provides idiomatic APIs to search and filter. The
simplest form is =gql/list=

#+begin_src clojure
(gql/list :payment
          {:filter {:cart-id {:eq "cart1"}}
           :shape [:id [:card [:name]]]
           :on-list #(rf/dispatch ::to-some-fx)})
#+end_src

Notice filter takes a map that supports most graphql filters (eq,
contains, between, starts-with, and, or etc). Filters are clojure
maps with prefix operators

=amplitude= also supports searches using Global Secondary Indexes(GSI)

For example, let us extend the Cart model to include a GSI on
shopper-id

#+begin_src graphql
type Cart @model
@key(
  name: "shopperCarts",
  fields: ["shopper_id", "createdAt"],
  queryField: "cartsByShopper"
)
{
  id: ID!
  shopper_id: String!
  line_items: [LineItem]
  payment: Payment @connection
  tax: Int
  total: Int
  createdAt: String!
}
#+end_src

The =@key= directive defines GSIs with a key and a sort-key. In this
case, the sort-key is createdAt

#+begin_src clojure
(gql/search :cart
            {:key :shopper-id
             :value "my-shopper-id"
             :query-field :carts-by-shopper
             :on-search #(rf/dispatch ::some-event %)})
#+end_src

gql/search also takes an optional =filter= that applies the filter on
the sorted resultset.

** Cognito-based Authentication

=amplitude.auth= provides a set of handy functions to build custom Auth
flows using cognito

#+BEGIN_SRC clojure
(:require [amplitude.auth :as auth])
(auth/init!)
(auth/sign-in {:username xxx :password xxx})
(auth/sign-out)
#+END_SRC

If the application needs to talk to REST API that is authenticated and
authorized by Cognito, we can get the =jwt-token= for the Authenticated
user as follows.

#+begin_src clojure
(auth/fetch-user-info)
=> {:username xxx
    :token jwt-token
    ...}
#+end_src
This token can be used subsequently as Authorization header in REST
api requests. See =amplitude.rest=

** Simplified REST Client

=amplitude.rest= provides functions to invoke http requests as
authenticated users using jwt-tokens.

#+BEGIN_SRC clojure
(:require
 [amplitude.rest :as rest])
(rest/init!)
(rest/get "/path" on-success on-error)
(rest/post "/path" body on-success on-error)
#+END_SRC

The callbacks =on-success= or =on-error= could be any arbitrary
function


** S3 Storage Abstraction

=amplitude.storage= provides idiomatic apis to put and get objects from
S3 Storage.

#+BEGIN_SRC clojure
(require [amplitude.storage :as storage])[
(storage/init!)
#+END_SRC

#+BEGIN_SRC clojure

(storage/put key
             data
             progress-callback
             on-success
             on-error
             :options {:level "private"
                       :contentType "text/plain"})

;; Example

(storage/put "foo/bar/baz.csv"
             data
             (fn [pct] (rf/dispatch ::events/progress pct))
             on-success
             on-error
             :options {:level "private"
                       :contentType "text/plain"})
#+END_SRC

and =storage/get= to retrive the key

#+begin_src clojure
(storage/get key callback-fn)
#+end_src
The callback-fn returns an url and not a stream.

** Cache

=amplitude.cache= provides functions to query and mutate LocalStorage
and SessionStorage. This is useful when caching resultsets

#+begin_src clojure
(require [amplitude.cache :as cache])
(cache/init! :storage :local) ;; storage can be :local or :session

(cache/put :foo "bar" :ttl 2400)
(cache/get :foo)
(cache/delete! :foo)
(cache/clear!)
#+end_src

* Running Example

#+begin_src sh

cd example
amplify init
amplify add function payment-processor
amplify add api graphql #  use schema.graphql
amplify push

yarn && shadow-cljs -A:dev watch app
#+end_src

* License - Apache 2.0

Copyright 2020-21 Omnyway Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

[[http://www.apache.org/licenses/LICENSE-2.0]]

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


* Thanks

- district0x for the awesome graphql-query library
- Abhik Kanra @trycatcher (contributor)
